// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id               String         @id @default(cuid())
  name             String?
  email            String?        @unique
  emailVerified    DateTime?
  image            String?
  profile          Profile?
  homes            Home[]
  favorites        Favorite[]
  reviews          Review[]
  sendedMessages   Message[]      @relation("SentMessages")
  recievedMessages Message[]      @relation("ReceivedMessages")
  bookings         Booking[]
  notifications    Notification[]
  Account          Account[]
  Session          Session[]
}

model Profile {
  id       String  @id @default(cuid())
  bio      String?
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @unique
  location String
}

model Home {
  id          String     @id @default(cuid())
  description String?
  title       String
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  category    Category?  @relation(fields: [categoryId], references: [id])
  categoryId  String?
  location    String
  value       Int
  images      Image[]
  favorites   Favorite[]
  reviews     Review[]
  bookings    Booking[]

  @@index([userId])
  @@index([categoryId])
}

model Category {
  id    String @id @default(cuid())
  home  Home[]
  title String
}

model Image {
  id      String @id @default(cuid())
  url     String
  altText String
  home    Home   @relation(fields: [homeId], references: [id], onDelete: Cascade)
  homeId  String

  @@index([homeId])
}

model Message {
  id             String        @id @default(cuid())
  content        String
  createdAt      DateTime      @default(now())
  sender         User          @relation("SentMessages", fields: [senderId], references: [id])
  senderId       String
  recipient      User          @relation("ReceivedMessages", fields: [recipientId], references: [id])
  recipientId    String
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?

  @@index([senderId])
  @@index([recipientId])
  @@index([conversationId])
}

model Favorite {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  home   Home   @relation(fields: [homeId], references: [id])
  homeId String

  @@unique([userId, homeId])
  @@index([homeId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  home      Home     @relation(fields: [homeId], references: [id])
  homeId    String

  @@unique([userId, homeId])
  @@index([homeId])
}

model Booking {
  id        String   @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  status    String   @default("pending")
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  home      Home     @relation(fields: [homeId], references: [id])
  homeId    String

  @@index([userId])
  @@index([homeId])
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@index([userId])
}

model Conversation {
  id           String    @id @default(cuid())
  participants String[]
  messages     Message[]
}
